/*
	D2GL: Diablo 2 LoD Glide/DDraw to OpenGL Wrapper.
	Copyright (C) 2023  Bayaraa

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once

namespace d2gl::d2 {

#define MERC_A1 0x010f
#define MERC_A2 0x0152
#define MERC_A3 0x0167
#define MERC_A4 0x0420 // PD2
#define MERC_A5 0x0231

#define LANG_ENG 0x00
#define LANG_ESP 0x01
#define LANG_DEU 0x02
#define LANG_FRA 0x03
#define LANG_POR 0x04
#define LANG_ITA 0x05
#define LANG_JPN 0x06
#define LANG_KOR 0x07
#define LANG_SIN 0x08
#define LANG_CHI 0x09
#define LANG_POL 0x0A
#define LANG_RUS 0x0B
#define LANG_DEF 0x0C

#define SCREENPANEL_NONE 0
#define SCREENPANEL_RIGHT 1
#define SCREENPANEL_LEFT 2
#define SCREENPANEL_BOTH 3

#define STAT_HP 6
#define STAT_MAXHP 7
#define STAT_DMGREDUCTIONPCT 36
#define STAT_MAGICDMGREDUCTIONPCT 37
#define STAT_FIRERESIST 39
#define STAT_LIGHTNINGRESIST 41
#define STAT_COLDRESIST 43
#define STAT_POISONRESIST 45
#define STAT_ITEMQUANTITY 70

enum D2CStat {
	STATS_STRENGTH = 0,
	STATS_ENERGY,
	STATS_DEXTERITY,
	STATS_VITALITY,
	STATS_STATPTS,
	STATS_NEWSKILLS,
	STATS_HP,
	STATS_MAXHP,
	STATS_MANA,
	STATS_MAXMANA,
	STATS_STAMINA,
	STATS_MAXSTAMINA,
	STATS_LEVEL,
	STATS_EXPERIENCE,
	STATS_GOLD,
	STATS_GOLDBANK,
	STATS_ITEM_ARMOR_PERCENT, // 0x10
	STATS_ITEM_MAXDAMAGE_PERCENT,
	STATS_ITEM_MINDAMAGE_PERCENT,
	STATS_TOHIT,
	STATS_TOBLOCK,
	STATS_MINDAMAGE,
	STATS_MAXDAMAGE,
	STATS_SECONDARY_MINDAMAGE,
	STATS_SECONDARY_MAXDAMAGE,
	STATS_DAMAGEPERCENT,
	STATS_MANARECOVERY,
	STATS_MANARECOVERYBONUS,
	STATS_STAMINARECOVERYBONUS,
	STATS_LASTEXP,
	STATS_NEXTEXP,
	STATS_ARMORCLASS,
	STATS_ARMORCLASS_VS_MISSILE, // 0x20
	STATS_ARMORCLASS_VS_HTH, // 0x21
	STATS_NORMAL_DAMAGE_REDUCTION,
	STATS_MAGIC_DAMAGE_REDUCTION,
	STATS_DAMAGERESIST,
	STATS_MAGICRESIST,
	STATS_MAXMAGICRESIST,
	STATS_FIRERESIST, // 0x27
	STATS_MAXFIRERESIST,
	STATS_LIGHTRESIST, // 0x29
	STATS_MAXLIGHTRESIST,
	STATS_COLDRESIST, // 0x2B
	STATS_MAXCOLDRESIST,
	STATS_POISONRESIST,
	STATS_MAXPOISONRESIST,
	STATS_DAMAGEAURA,
	STATS_FIREMINDAM, // 0x30
	STATS_FIREMAXDAM,
	STATS_LIGHTMINDAM,
	STATS_LIGHTMAXDAM,
	STATS_MAGICMINDAM,
	STATS_MAGICMAXDAM,
	STATS_COLDMINDAM,
	STATS_COLDMAXDAM,
	STATS_COLDLENGTH,
	STATS_POISONMINDAM,
	STATS_POISONMAXDAM,
	STATS_POISONLENGTH,
	STATS_LIFEDRAINMINDAM,
	STATS_LIFEDRAINMAXDAM,
	STATS_MANADRAINMINDAM,
	STATS_MANADRAINMAXDAM,
	STATS_STAMDRAINMINDAM, // 0x40
	STATS_STAMDRAINMAXDAM,
	STATS_STUNLENGTH,
	STATS_VELOCITYPERCENT,
	STATS_ATTACKRATE,
	STATS_OTHER_ANIMRATE,
	STATS_QUANTITY,
	STATS_VALUE,
	STATS_DURABILITY,
	STATS_MAXDURABILITY,
	STATS_HPREGEN,
	STATS_ITEM_MAXDURABILITY_PERCENT,
	STATS_ITEM_MAXHP_PERCENT,
	STATS_ITEM_MAXMANA_PERCENT,
	STATS_ITEM_ATTACKERTAKESDAMAGE,
	STATS_ITEM_GOLDBONUS,
	STATS_ITEM_MAGICBONUS, // 0x50
	STATS_ITEM_KNOCKBACK,
	STATS_ITEM_TIMEDURATION,
	STATS_ITEM_ADDCLASSSKILLS, // STATS_ITEM_ADDAMASKILLPOINTS
	STATS_UNSENTPARAM1, // STATS_ITEM_ADDPALSKILLPOINTS
	STATS_ADDEXPERIENCE, // STATS_ITEM_ADDNECSKILLPOINTS
	STATS_HEALAFTERKILL, // STATS_ITEM_ADDSORSKILLPOINTS
	STATS_REDUCESPRICES, // STATS_ITEM_ADDBARSKILLPOINTS
	STATS_ITEM_DOUBLEHERBDURATION,
	STATS_ITEM_LIGHTRADIUS,
	STATS_ITEM_LIGHTCOLOR,
	STATS_ITEM_REQ_PERCENT,
	STATS_LEVELREQ, // STATS_ITEM_FASTATTACKRATE
	STATS_ITEM_FASTERATTACKRATE,
	STATS_ITEM_LEVELREQPCT, // STATS_ITEM_FASTESTATTACKRATE,
	STATS_LASTBLOCKFRAME, // STATS_ITEM_FASTMOVEVELOCITY,
	STATS_ITEM_FASTERMOVEVELOCITY, // 0x60
	STATS_NONCLASSKILL, // STATS_ITEM_FASTESTMOVEVELOCITY,
	STATS_STATE, // STATS_ITEM_FASTGETHITRATE,
	STATS_ITEM_FASTERGETHITRATE,
	STATS_MONSTER_PLAYERCOUNT, // STATS_ITEM_FASTESTGETHITRATE,
	STATS_SKILL_POISON_OVERRIDE_LENGTH, // STATS_ITEM_FASTBLOCKRATE,
	STATS_ITEM_FASTERBLOCKRATE,
	STATS_SKILL_BYPASS_UNDEAD, // STATS_ITEM_FASTESTBLOCKRATE,
	STATS_SKILL_BYPASS_DEMONS, // STATS_ITEM_FASTCASTRATE,
	STATS_ITEM_FASTERCASTRATE,
	STATS_SKILL_BYPASS_BEASTS, // STATS_ITEM_FASTESTCASTRATE,
	STATS_ITEM_SINGLESKILL, // STATS_ITEM_SINGLESKILL1,
	STATS_ITEM_RESTINPEACE, // STATS_ITEM_SINGLESKILL2,
	STATS_CURSE_RESISTANCE, // STATS_ITEM_SINGLESKILL3,
	STATS_ITEM_POISONLENGTHRESIST,
	STATS_ITEM_NORMALDAMAGE,
	STATS_ITEM_HOWL, // 0x70
	STATS_ITEM_STUPIDITY,
	STATS_ITEM_DAMAGETOMANA,
	STATS_ITEM_IGNORETARGETAC,
	STATS_ITEM_FRACTIONALTARGETAC,
	STATS_ITEM_PREVENTHEAL,
	STATS_ITEM_HALFFREEZEDURATION,
	STATS_ITEM_TOHIT_PERCENT,
	STATS_ITEM_DAMAGETARGETAC,
	STATS_ITEM_DEMONDAMAGE_PERCENT,
	STATS_ITEM_UNDEADDAMAGE_PERCENT,
	STATS_ITEM_DEMON_TOHIT,
	STATS_ITEM_UNDEAD_TOHIT,
	STATS_ITEM_THROWABLE,
	STATS_ITEM_ELEMSKILL, // STATS_ITEM_FIRESKILL,
	STATS_ITEM_ALLSKILLS,
	STATS_ITEM_ATTACKERTAKESLIGHTDAMAGE, // 0x80
	STATS_IRONMAIDEN_LEVEL,
	STATS_LIFETAP_LEVEL,
	STATS_THORNS_LEVEL,
	STATS_BONEARMOR,
	STATS_BONEARMORMAX,
	STATS_ITEM_FREEZE,
	STATS_ITEM_OPENWOUNDS,
	STATS_ITEM_CRUSHINGBLOW,
	STATS_ITEM_KICKDAMAGE,
	STATS_ITEM_MANAAFTERKILL,
	STATS_ITEM_HEALAFTERDEMONKILL,
	STATS_ITEM_EXTRABLOOD,
	STATS_ITEM_DEADLYSTRIKE,
	STATS_ITEM_ABSORBFIRE_PERCENT,
	STATS_ITEM_ABSORBFIRE,
	STATS_ITEM_ABSORBLIGHT_PERCENT,
	STATS_ITEM_ABSORBLIGHT,
	STATS_ITEM_ABSORBMAGIC_PERCENT,
	STATS_ITEM_ABSORBMAGIC,
	STATS_ITEM_ABSORBCOLD_PERCENT,
	STATS_ITEM_ABSORBCOLD,
	STATS_ITEM_SLOW,
	STATS_ITEM_AURA, // STATS_ITEM_BLESSEDAIM,
	STATS_ITEM_INDESTRUCTIBLE, // STATS_ITEM_DEFIANCE,
	STATS_ITEM_CANNOTBEFROZEN,
	STATS_ITEM_STAMINADRAINPCT,
	STATS_ITEM_REANIMATE,
	STATS_ITEM_PIERCE,
	STATS_ITEM_MAGICARROW,
	STATS_ITEM_EXPLOSIVEARROW,
	STATS_ITEM_THROW_MINDAMAGE,
	STATS_ITEM_THROW_MAXDAMAGE,
	STATS_SKILL_HANDOFATHENA,
	STATS_SKILL_STAMINAPERCENT,
	STATS_SKILL_PASSIVE_STAMINAPERCENT,
	STATS_SKILL_CONCENTRATION,
	STATS_SKILL_ENCHANT,
	STATS_SKILL_PIERCE,
	STATS_SKILL_CONVICTION,
	STATS_SKILL_CHILLINGARMOR,
	STATS_SKILL_FRENZY,
	STATS_SKILL_DECREPIFY,
	STATS_SKILL_ARMOR_PERCENT,
	STATS_ALIGNMENT,
	STATS_TARGET0,
	STATS_TARGET1,
	STATS_GOLDLOST,
	STATS_CONVERSION_LEVEL,
	STATS_CONVERSION_MAXHP,
	STATS_UNIT_DOOVERLAY,
	STATS_ATTACK_VS_MONTYPE, // STATS_ITEM_ADDDRUSKILLPOINTS,
	STATS_DAMAGE_VS_MONTYPE, // STATS_ITEM_ADDASSSKILLPOINTS,
	STATS_FADE, // STATS_ITEM_ADDSKILL_SINGLE4,
	STATS_ARMOR_OVERRIDE_PERCENT, // STATS_ITEM_ADDSKILL_SINGLE5,
	STATS_UNUSED183, // STATS_ITEM_ADDSKILL_SINGLE6,
	STATS_UNUSED184, // STATS_ITEM_ADDSKILL_SINGLE7,
	STATS_UNUSED185, // STATS_ITEM_ADDSKILL_SINGLE8,
	STATS_UNUSED186, // STATS_ITEM_ADDSKILL_SINGLE9,
	STATS_UNUSED187, // STATS_ITEM_ADDSKILL_SINGLE10,
	STATS_ADDSKILL_TAB, // STATS_ITEM_ADDSKILL_TAB1,
	STATS_UNUSED189, // STATS_ITEM_ADDSKILL_TAB2,
	STATS_UNUSED190, // STATS_ITEM_ADDSKILL_TAB3,
	STATS_UNUSED191, // STATS_ITEM_ADDSKILL_TAB4,
	STATS_UNUSED192, // STATS_ITEM_ADDSKILL_TAB5,
	STATS_UNUSED193, // STATS_ITEM_ADDSKILL_TAB6,
	STATS_ITEM_NUMSOCKETS,
	STATS_ITEM_SKILLONATTACK, // STATS_ITEM_SKILLONATTACK1,
	STATS_ITEM_SKILLONKILL, // STATS_ITEM_SKILLONATTACK2,
	STATS_ITEM_SKILLONDEATH, // STATS_ITEM_SKILLONATTACK3,
	STATS_ITEM_SKILLONHIT, // STATS_ITEM_SKILLONHIT1,
	STATS_ITEM_SKILLONLEVELUP, // STATS_ITEM_SKILLONHIT2,
	STATS_UNUSED200, // STATS_ITEM_SKILLONHIT3,
	STATS_ITEM_SKILLONGETHIT, // STATS_ITEM_SKILLONGETHIT1,
	STATS_UNUSED202, // STATS_ITEM_SKILLONGETHIT2,
	STATS_UNUSED203, // STATS_ITEM_SKILLONGETHIT3,
	STATS_ITEM_CHARGED_SKILL, // STATS_ITEM_CHARGED_SKILL0,
	STATS_UNUSED205, // STATS_ITEM_CHARGED_SKILL1,
	STATS_UNUSED206, // STATS_ITEM_CHARGED_SKILL2,
	STATS_UNUSED207, // STATS_ITEM_CHARGED_SKILL3,
	STATS_UNUSED208, // STATS_ITEM_CHARGED_SKILL4,
	STATS_UNUSED209, // STATS_ITEM_CHARGED_SKILL5,
	STATS_UNUSED210, // STATS_ITEM_CHARGED_SKILL6,
	STATS_UNUSED211, // STATS_ITEM_CHARGED_SKILL7,
	STATS_UNUSED212, // STATS_ITEM_CHARGED_SKILL8,
	STATS_UNUSED213, // STATS_ITEM_CHARGED_SKILL9,
	STATS_ITEM_ARMOR_PERLEVEL,
	STATS_ITEM_ARMORPERCENT_PERLEVEL,
	STATS_ITEM_HP_PERLEVEL,
	STATS_ITEM_MANA_PERLEVEL,
	STATS_ITEM_MAXDAMAGE_PERLEVEL,
	STATS_ITEM_MAXDAMAGE_PERCENT_PERLEVEL,
	STATS_ITEM_STRENGTH_PERLEVEL,
	STATS_ITEM_DEXTERITY_PERLEVEL,
	STATS_ITEM_ENERGY_PERLEVEL,
	STATS_ITEM_VITALITY_PERLEVEL,
	STATS_ITEM_TOHIT_PERLEVEL,
	STATS_ITEM_TOHITPERCENT_PERLEVEL,
	STATS_ITEM_COLD_DAMAGEMAX_PERLEVEL,
	STATS_ITEM_FIRE_DAMAGEMAX_PERLEVEL,
	STATS_ITEM_LTNG_DAMAGEMAX_PERLEVEL,
	STATS_ITEM_POIS_DAMAGEMAX_PERLEVEL,
	STATS_ITEM_RESIST_COLD_PERLEVEL,
	STATS_ITEM_RESIST_FIRE_PERLEVEL,
	STATS_ITEM_RESIST_LTNG_PERLEVEL,
	STATS_ITEM_RESIST_POIS_PERLEVEL,
	STATS_ITEM_ABSORB_COLD_PERLEVEL,
	STATS_ITEM_ABSORB_FIRE_PERLEVEL,
	STATS_ITEM_ABSORB_LTNG_PERLEVEL,
	STATS_ITEM_ABSORB_POIS_PERLEVEL,
	STATS_ITEM_THORNS_PERLEVEL,
	STATS_ITEM_FIND_GOLD_PERLEVEL,
	STATS_ITEM_FIND_MAGIC_PERLEVEL,
	STATS_ITEM_REGENSTAMINA_PERLEVEL,
	STATS_ITEM_STAMINA_PERLEVEL,
	STATS_ITEM_DAMAGE_DEMON_PERLEVEL,
	STATS_ITEM_DAMAGE_UNDEAD_PERLEVEL,
	STATS_ITEM_TOHIT_DEMON_PERLEVEL,
	STATS_ITEM_TOHIT_UNDEAD_PERLEVEL,
	STATS_ITEM_CRUSHINGBLOW_PERLEVEL,
	STATS_ITEM_OPENWOUNDS_PERLEVEL,
	STATS_ITEM_KICK_DAMAGE_PERLEVEL,
	STATS_ITEM_DEADLYSTRIKE_PERLEVEL,
	STATS_ITEM_FIND_GEMS_PERLEVEL,
	STATS_ITEM_REPLENISH_DURABILITY,
	STATS_ITEM_REPLENISH_QUANTITY,
	STATS_ITEM_EXTRA_STACK,
	STATS_ITEM_FIND_ITEM,
	STATS_ITEM_SLASH_DAMAGE,
	STATS_ITEM_SLASH_DAMAGE_PERCENT,
	STATS_ITEM_CRUSH_DAMAGE,
	STATS_ITEM_CRUSH_DAMAGE_PERCENT,
	STATS_ITEM_THRUST_DAMAGE,
	STATS_ITEM_THRUST_DAMAGE_PERCENT,
	STATS_ITEM_ABSORB_SLASH,
	STATS_ITEM_ABSORB_CRUSH,
	STATS_ITEM_ABSORB_THRUST,
	STATS_ITEM_ABSORB_SLASH_PERCENT,
	STATS_ITEM_ABSORB_CRUSH_PERCENT,
	STATS_ITEM_ABSORB_THRUST_PERCENT,
	STATS_ITEM_ARMOR_BYTIME,
	STATS_ITEM_ARMORPERCENT_BYTIME,
	STATS_ITEM_HP_BYTIME,
	STATS_ITEM_MANA_BYTIME,
	STATS_ITEM_MAXDAMAGE_BYTIME,
	STATS_ITEM_MAXDAMAGE_PERCENT_BYTIME,
	STATS_ITEM_STRENGTH_BYTIME,
	STATS_ITEM_DEXTERITY_BYTIME,
	STATS_ITEM_ENERGY_BYTIME,
	STATS_ITEM_VITALITY_BYTIME,
	STATS_ITEM_TOHIT_BYTIME,
	STATS_ITEM_TOHITPERCENT_BYTIME,
	STATS_ITEM_COLD_DAMAGEMAX_BYTIME,
	STATS_ITEM_FIRE_DAMAGEMAX_BYTIME,
	STATS_ITEM_LTNG_DAMAGEMAX_BYTIME,
	STATS_ITEM_POIS_DAMAGEMAX_BYTIME,
	STATS_ITEM_RESIST_COLD_BYTIME,
	STATS_ITEM_RESIST_FIRE_BYTIME,
	STATS_ITEM_RESIST_LTNG_BYTIME,
	STATS_ITEM_RESIST_POIS_BYTIME,
	STATS_ITEM_ABSORB_COLD_BYTIME,
	STATS_ITEM_ABSORB_FIRE_BYTIME,
	STATS_ITEM_ABSORB_LTNG_BYTIME,
	STATS_ITEM_ABSORB_POIS_BYTIME,
	STATS_ITEM_FIND_GOLD_BYTIME,
	STATS_ITEM_FIND_MAGIC_BYTIME,
	STATS_ITEM_REGENSTAMINA_BYTIME,
	STATS_ITEM_STAMINA_BYTIME,
	STATS_ITEM_DAMAGE_DEMON_BYTIME,
	STATS_ITEM_DAMAGE_UNDEAD_BYTIME,
	STATS_ITEM_TOHIT_DEMON_BYTIME,
	STATS_ITEM_TOHIT_UNDEAD_BYTIME,
	STATS_ITEM_CRUSHINGBLOW_BYTIME,
	STATS_ITEM_OPENWOUNDS_BYTIME,
	STATS_ITEM_KICK_DAMAGE_BYTIME,
	STATS_ITEM_DEADLYSTRIKE_BYTIME,
	STATS_ITEM_FIND_GEMS_BYTIME,
	STATS_ITEM_PIERCE_COLD,
	STATS_ITEM_PIERCE_FIRE,
	STATS_ITEM_PIERCE_LTNG,
	STATS_ITEM_PIERCE_POIS,
	STATS_ITEM_DAMAGE_VS_MONSTER,
	STATS_ITEM_DAMAGE_PERCENT_VS_MONSTER,
	STATS_ITEM_TOHIT_VS_MONSTER,
	STATS_ITEM_TOHIT_PERCENT_VS_MONSTER,
	STATS_ITEM_AC_VS_MONSTER,
	STATS_ITEM_AC_PERCENT_VS_MONSTER,
	STATS_FIRELENGTH,
	STATS_BURNINGMIN,
	STATS_BURNINGMAX,
	STATS_PROGRESSIVE_DAMAGE,
	STATS_PROGRESSIVE_STEAL,
	STATS_PROGRESSIVE_OTHER,
	STATS_PROGRESSIVE_FIRE,
	STATS_PROGRESSIVE_COLD,
	STATS_PROGRESSIVE_LIGHTNING,
	STATS_ITEM_EXTRA_CHARGES,
	STATS_PROGRESSIVE_TOHIT,
	STATS_POISON_COUNT,
	STATS_DAMAGE_FRAMERATE,
	STATS_PIERCE_IDX,
	STATS_PASSIVE_FIRE_MASTERY, ///////////////////////// NEW FOR 1.10
	STATS_PASSIVE_LTNG_MASTERY,
	STATS_PASSIVE_COLD_MASTERY,
	STATS_PASSIVE_POIS_MASTERY,
	STATS_PASSIVE_FIRE_PIERCE,
	STATS_PASSIVE_LTNG_PIERCE,
	STATS_PASSIVE_COLD_PIERCE,
	STATS_PASSIVE_POIS_PIERCE,
	STATS_PASSIVE_CRITICAL_STRIKE,
	STATS_PASSIVE_DODGE,
	STATS_PASSIVE_AVOID,
	STATS_PASSIVE_EVADE,
	STATS_PASSIVE_WARMTH,
	STATS_PASSIVE_MASTERY_MELEE_TH,
	STATS_PASSIVE_MASTERY_MELEE_DMG,
	STATS_PASSIVE_MASTERY_MELEE_CRIT,
	STATS_PASSIVE_MASTERY_THROW_TH,
	STATS_PASSIVE_MASTERY_THROW_DMG,
	STATS_PASSIVE_MASTERY_THROW_CRIT,
	STATS_PASSIVE_WEAPONBLOCK,
	STATS_PASSIVE_SUMMON_RESIST,
	STATS_MODIFIERLIST_SKILL,
	STATS_MODIFIERLIST_LEVEL,
	STATS_LAST_SENT_HP_PCT,
	STATS_SOURCE_UNIT_TYPE,
	STATS_SOURCE_UNIT_ID,
	STATS_SHORTPARAM1,
	STATS_QUESTITEMDIFFICULTY,
};

enum class UnitType {
	Player,
	Monster,
	Object,
	Missile,
	Item,
	VisTile,
	Count,
};

#define MERC_A1 0x010f
#define MERC_A2 0x0152
#define MERC_A3 0x0167
#define MERC_A5 0x0231

enum class ItemQuality {
	None,
	Inferior,
	Normal,
	Superior,
	Magic,
	Set,
	Rare,
	Unique,
	Craft,
};

enum class MonsterType {
	Normal,
	SuperUnique,
	Boss,
	Champion,
	Possesed,
	Ghostly,
};

struct UnitAny;
struct Room1;
struct StatList;
struct MonsterDataD2VN;

typedef void(__fastcall* D2StatlistExpire_t)(UnitAny*, int, StatList*);

#pragma pack(push, 1)
struct D2Seed {
	union {
		struct
		{
			union {
				struct
				{
					DWORD dwLoSeed; // 0x00
					DWORD dwHiSeed; // 0x04
				};
				struct
				{
					int nLowSeed; // 0x00
					int nHighSeed; // 0x04
				};
			};
		};

		unsigned long long qwSeed; // 0x00
		uint64_t lSeed; // 0x00
	};
};

struct DT1SubBlock {
	WORD xPos;
	WORD yPos;
	WORD _1;
	BYTE gridX;
	BYTE gridY;
	WORD wTileFormat;
	DWORD dwSubLength;
	WORD _2;
	DWORD* pDataOffset;
};
#pragma pack(pop)

struct TileContext {
	DWORD dwDirection;
	WORD wRoofIndex;
	BYTE bSound;
	BYTE bAnimated;
	DWORD dwSizeY;
	DWORD dwSizeX;
	DWORD dwZeros1;
	DWORD dwOrientation;
	DWORD dwMainIndex;
	DWORD dwSubIndex;
	DWORD dwFrame;
	BYTE _1[4];
	BYTE bFlags[25];
	BYTE _2;
	WORD sCacheIndex;
	DWORD _3;
	DWORD dwDataPtr;
	DWORD dwSize;
	DWORD dwSubBlocks;
	DT1SubBlock* pBlocks;
	char* szTileName;
	DWORD** ptBlock;
};

struct GFXLight {
	union {
		struct {
			BYTE intensity;
			BYTE r, g, b;
		};
		DWORD dwColor;
	};
};

struct GFXLightEx : GFXLight {
	int nXpos;
	int nYpos;
};

struct GfxCell {
	DWORD flags;
	DWORD width;
	DWORD height;
	DWORD xoffs;
	DWORD yoffs;
	DWORD _1;
	DWORD lpParent;
	DWORD length;
	BYTE cols;
};

struct CellFile {
	DWORD dwVersion;
	struct {
		WORD dwFlags;
		BYTE mylastcol;
		BYTE mytabno : 1;
	};
	DWORD eFormat;
	DWORD termination;
	DWORD numdirs;
	DWORD numcells;
	GfxCell* cells[255];
};

struct CellContext {
	union {
		struct {
			DWORD nCellNo;
			DWORD _1[12];
			CellFile* pCellFile;
			DWORD _2;
			GfxCell* pCurGfxCell;
		} v113;

		struct {
			DWORD _1[13];
			GfxCell* pCurGfxCell;
			DWORD _2;
			CellFile* pCellFile;
			DWORD nCellNo;
		} v112;

		struct {
			DWORD _1[2];
			CellFile* pCellFile;
			DWORD _2[2];
			GfxCell* pCurGfxCell;
			DWORD _3[11];
			DWORD nCellNo;
		} v111;

		struct {
			GfxCell* pCurGfxCell;
			CellFile* pCellFile;
			DWORD nCellNo;
		} v109;
	};
};

struct Path {
	DWORD x;
	DWORD y;
	DWORD xAutomap;
	DWORD yAutomap;
	short xTarget;
	short yTarget;
	DWORD _1[2];
	Room1* pRoom1;
	Room1* pRoomUnk;
	DWORD _2[3];
	UnitAny* pUnit;
	DWORD dwFlags;
	DWORD _3;
	DWORD dwPathType;
	DWORD dwPrevPathType;
	DWORD dwUnitSize;
	DWORD _4[2];
	DWORD dwCollisionFlag;
	DWORD _5;
	UnitAny* pTargetUnit;
	DWORD dwTargetType;
	DWORD dwTargetId;
	BYTE bDirection;
};

struct StaticPath {
	Room1* pRoom1;
	DWORD xOffset;
	DWORD yOffset;
	DWORD xPos;
	DWORD yPos;
	DWORD _1[2];
	DWORD dwFlags;
};

struct PlayerData {
	char szName[16];
};

struct MonStatsTxt {
	DWORD _1[19];
	BYTE bAlign;
};

struct MonsterData110 {
	MonStatsTxt* pMonStatsTxt;
	BYTE Components[16];
	WORD NameSeed;
	struct {
		BYTE fUnk : 1;
		BYTE fSuperUniq : 1;
		BYTE fChamp : 1;
		BYTE fBoss : 1;
		BYTE fMinion : 1;
		BYTE fPossesed : 1;
		BYTE fGhostly : 1;
		BYTE fMultishot : 1;
	};
	BYTE dwLastMode;
	DWORD dwDuriel;
	BYTE anEnchants[9];
	WORD wUniqueNo;
	DWORD _1;
	wchar_t* wName;
};

struct MonsterData109 {
	struct {
		WORD fBoss : 1;
		WORD fMinion : 1;
		WORD fChamp : 1;
	};
	wchar_t wName[1];
	DWORD _1[52];
	DWORD anEnchants[9];
};

struct bItemFlags
{
	BYTE bNewItem : 1; // 1
	BYTE bTarget : 1; // 2
	BYTE bTargeting : 1; // 3
	BYTE bDeleted : 1; // 4
	BYTE bIdentified : 1; // 5
	BYTE bQuantity : 1; // 6
	BYTE bWeaponSetIn : 1; // 7
	BYTE bWeaponSetOut : 1; // 8
	BYTE bBroken : 1; // 9
	BYTE bRepaired : 1; // 10
	BYTE Flag11 : 1; // 11
	BYTE bSocketed : 1; // 12
	BYTE bNonSellable : 1; // 13
	BYTE bInStore : 1; // 14 Also Has Been Picked Up
	BYTE bNoEquip : 1; // 15
	BYTE bNamed : 1; // 16
	BYTE bOrgan : 1; // 17 Also bEar
	BYTE bStarter : 1; // 18 Also bSellCheap
	BYTE Flag19 : 1; // 19
	BYTE bInit : 1; // 20
	BYTE Flag21 : 1; // 21
	BYTE bCompactSave : 1; // 22 Also bSimple
	BYTE bEthereal : 1; // 23
	BYTE bJustSaved : 1; // 24
	BYTE bPersonalized : 1; // 25
	BYTE bLowQuality : 1; // 26
	BYTE bRuneword : 1; // 27
	BYTE bItem : 1; // 28
	BYTE _Unused1 : 1; // 29
	BYTE _Unused2 : 1; // 30
	BYTE _Unused3 : 1; // 31
	BYTE _Unused4 : 1; // 32
};

struct ItemData110 {
	ItemQuality dwQuality;
	D2Seed pSeed; // 0x04
	DWORD playerID; //+0C #10734 / #10735 (PCInventory->ptPlayer->0C)
	DWORD seedStarting; //+10
	DWORD flags1; //+14
	union 
	{
		bItemFlags dwItemFlags; //+18
		uint32_t dwItemFlagsEx; // 0x18
	};
	DWORD guid1; //+1C Global Unique ID 1
	DWORD guid2; //+20 Global Unique ID 2
	DWORD dwDeleteFrame; //+24 Global Unique ID 3 
	DWORD dwFileIndex;		//0x28
	DWORD dwItemLevel;		//0x2c
	WORD wVersion;
	WORD wRarePrefix;
	WORD wRareSuffix;
	WORD wAutoPrefix;
	WORD wPrefix[3];
	WORD wSuffix[3];
	BYTE BodyLocation;
	BYTE ItemLocation;
	BYTE EarLevel;
	BYTE VarGfx;
	CHAR personalizedName[16];
	WORD _4;
	void* pOwnerInventory;
	UnitAny* pPrevInvItem;
	UnitAny* pNextInvItem;
	BYTE _5;
	BYTE NodePage;
	WORD _6;
	DWORD _7[6];
	UnitAny* pOwner;
};

struct ItemData109 {
	ItemQuality dwQuality;
	DWORD _1[15];
	BYTE BodyLocation;
	BYTE ItemLocation;
};

struct UnitAny {
	UnitType dwType;
	union {
		struct {
			DWORD dwClassId;
			void* pMemPool;
			DWORD dwUnitId;
			DWORD dwMode;
			union {
				PlayerData* pPlayerData;
				ItemData110* pItemData;
				MonsterData110* pMonsterData;
				MonsterDataD2VN* pMonsterDataD2VN;
				void* pObjectData;
			};
			DWORD dwAct;
			void* pAct;
			DWORD dwSeed[2];
			DWORD dwInitSeed;
			union {
				Path* pPath;
				StaticPath* pStaticPath;
			};
			DWORD _1[16];
			UnitAny* pUpdateUnit;
			DWORD _2[8];
			DWORD dwOwnerType;
			DWORD dwOwnerId;
			DWORD _3[2];
			void* pOMsg;
			void* pInfo;
			void* ptCombat;
			DWORD _4[5];
			DWORD dwFlags;
			DWORD dwFlags2;
			DWORD _5[5];
			UnitAny* pChangedNext;
			UnitAny* pRoomNext;
			UnitAny* pListNext;
		} v110;

		struct {
			DWORD _1;
			DWORD dwUnitId;
			DWORD _2[11];
			union {
				Path* pPath;
				StaticPath* pStaticPath;
			};
			DWORD _3[13];
			union {
				PlayerData* pPlayerData;
				ItemData109* pItemData;
				MonsterData109* pMonsterData;
				void* pObjectData;
			};
			DWORD _4[29];
			DWORD dwFlags;
			DWORD dwFlags2;
			DWORD _5[10];
			UnitAny* pListNext;
			UnitAny* pRoomNext;
		} v109;
	};
};

#pragma pack(push, 1)
struct Room1 {
	Room1** pRoomsNear;
	DWORD _1[3];
	void* pRoom2;
	DWORD _2[2];
	UnitAny** pUnitChanged;
	void* Coll;
	DWORD dwRoomsNear;
	DWORD nPlayerUnits;
	void* pAct;
	DWORD _3;
	DWORD nUnknown;
	DWORD _4[4];
	void** pClients;
	BYTE hCoords[32];
	int64_t hSeed;
	UnitAny* pUnitFirst;
	DWORD nNumClients;
	Room1* pRoomNext;
};

struct Stat {
	WORD nLayer; // 0x00
	WORD nStat; // 0x02
	int nValue; // 0x04
};

struct StatData // size 0x8
{
	Stat* pStat; // 0x00 An Array[wStatCount]
	WORD nStatCount; // 0x04
	WORD nBitSize; // 0x06
	static const int nGrowthAmount = 4;
	static const int nShrinkThreshold = 8;
};

struct StatList // 0x40
{
	void* pMemPool; // 0x00
	UnitAny* pUnit; // 0x04
	DWORD dwOwnerType; // 0x08
	DWORD dwOwnerId; // 0x0C
	DWORD dwFlags; // 0x10
	union {
		DWORD dwStateNo; // 0x14
		DWORD dwState; // 0x14
	};
	DWORD ExpireFrame; // 0x18
	DWORD SkillNo; // 0x1C
	DWORD sLvl; // 0x20
	StatData Stats; // 0x24 //D2StatDataStrc
	StatList* pPrevLink; // 0x2C
	StatList* pNextLink; // 0x30
	StatList* pPrev; // 0x34
	D2StatlistExpire_t pExpireFunc; // 0x38
};

struct UnkMonsterData 
{
	int32_t unk0x00; // 0x00
	int32_t nLifePercentage; // 0x04
	int32_t unk0x08; // 0x08
	uint8_t nCount; // 0x0C
	uint8_t pad0x0D[3]; // 0x0D
};

struct MonsterDataD2VN {
	MonStatsTxt* pMonStatsTxt; // 0x00
	BYTE Components[16]; // 0x04
	WORD NameSeed; // 0x14
	BYTE flags; // 0x16
	BYTE nLastAnimMode; // 0x17
	DWORD dwDurielFlag; // 0x18
	BYTE nMonUMod[10]; // 0x1C
	WORD nBossHcidx; // 0x26
	void* pAiGeneral; // 0x28
	union // 0x2C
	{
		void* pAiParam; // Server pMonster
		wchar_t* wszMonName; // Client pMonster
	};
	void* pAiUnk; // 0x30
	uint32_t unk0x34; // 0x34
	uint32_t unk0x38; // 0x38
	UnkMonsterData unk0x3C; // 0x3C
	uint32_t unk0x4C; // 0x4C
	DWORD pVision; // 0x50
	DWORD dwAiState; // 0x54
	DWORD dwTxtLevelNo; // 0x58
	WORD bSummonerFlag; // 0x5C
	BYTE pad0x5E[2]; // 0x5E
	// Custom
	int32_t nTypeMonster;
	BYTE nLevelSkillsUp;
	__int64 nHP;
	__int64 nMaxHP;
	int nCountCTC;
	char szPlayerKill[20];
	int nSkilllLevel[1024];
};

#pragma pack(pop)

}